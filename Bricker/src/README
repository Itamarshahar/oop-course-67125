itamarshahar2, amirt97
315669689, 208588244

We have chosen to manage the deletion of game objects through the
BrickerGameManager class. This involves passing the BrickerGameManager instance
to the BasicCollisionStrategy constructor and using BrickerGameManager
methods to delete game objects.
Advantages
Centralized Control: Simplifies tracking and managing game objects.
Encapsulation: Keeps game object management logic within BrickerGameManager.
Ease of Maintenance: Changes in game object management are localized to
BrickerGameManager.
Disadvantages
Increased Coupling: Tighter dependency between BrickerGameManager and
BasicCollisionStrategy.
Potential Overhead: Centralized management could become complex.
Limited Direct Access: All interactions with game objects must go through
BrickerGameManager.
This approach enhances maintainability and clarity at the cost of some added
complexity and coupling.

1. GraphicLifeCounter
Responsibility:
To visually display the player's remaining lives using graphical icons
(such as heart images).
Key Functions:
Initialize and position life icons.
Add or remove icons based on the player's current number of lives.
2. NumericLifeCounter
Responsibility:
To display the player's remaining lives in a numerical format using text.
Key Functions:
Update the displayed number of lives.
Change the text color based on the number of remaining lives.

Added Classes:
1. CollisionStrategyFactory
Class: CollisionStrategyFactory
Functionality:
The CollisionStrategyFactory class acts as a factory for creating different
collision strategies based on specified parameters.
It contains methods for creating various collision strategies, including the
option to wrap one strategy with another.
Initial Use of Decorator-like Design:
At the core of the collision handling system is a decorator-like design
pattern,
where different collision behaviors can be combined and wrapped around each
other to create complex interactions. This design allows for modular and
extensible collision handling in the game.
How onCollision Functions Utilize Strategy Wrapping:
Each onCollision function in the implemented classes follows this pattern:
Invoke Wrapped Strategy:
The function first invokes the onCollision method of the wrapped strategy.
This ensures that the behavior defined by the wrapped strategy is executed
before applying any additional behavior.
Execute Current Strategy's Behavior:
After invoking the wrapped strategy's onCollision method, the current
strategy's
specific behavior is executed. This behavior could involve adding visual
effects,
spawning new game objects, or modifying game state based on the collision.
2. BasicCollisionStrategy
Class: BasicCollisionStrategy
Implementation:
This strategy removes the collided object (presumably the brick) from the
game and decrements the brick counter.
Role of the Class:
BasicCollisionStrategy implements the CollisionStrategy interface.
It contains the core behavior for a brick collision: removing the
brick from the game and updating the brick counter.
3. CameraStrategy
Class: CameraStrategy
Implementation:
This strategy starts a camera effect when a collision occurs.
It wraps another CollisionStrategy and extends its behavior by adding the
camera effect.
Role of the Class:
CameraStrategy also implements the CollisionStrategy interface. It wraps an
existing collision strategy (e.g., BasicCollisionStrategy) and, in addition
to the base strategy's behavior, it starts the camera effect centered on the
ball that triggered the collision. Utilizing the method startCamera in
BrickerGameManager.
4. ExtraLifeStrategy
Class: ExtraLifeStrategy
Implementation:
This strategy adds an extra life to the player when a collision occurs.
Similar to CameraStrategy, it wraps another CollisionStrategy.
Role of the Class:
ExtraLifeStrategy implements the CollisionStrategy interface and wraps another
strategy. It extends the base strategy's behavior by adding an extra life to
the playe. Upon collision a heart drops from the place of the brick and if
the player catches it with the paddle he'll be rewarded an extra life.
5. ExtraPaddleStrategy
Class: ExtraPaddleStrategy
Implementation:
This strategy adds an extra paddle to the game when a collision occurs.
It wraps another CollisionStrategy.
Role of the Class:
ExtraPaddleStrategy implements the CollisionStrategy interface and wraps
another strategy. It extends the base strategy's behavior by adding an extra
paddle to the game. To implement this class we created another class that
extend Paddle class: ExtraPaddle. It has the same functions of the paddle.
We just changed it's spawning location and it also has a counter that keep
track on the amount of collision it has endured. If it gets to the max we
remove it from the game.
6. PuckStrategy
Class: PuckStrategy
Implementation:
This strategy creates two new pucks at the collision position when a collision
occurs.
It wraps another CollisionStrategy.
Role of the Class:
PuckStrategy implements the CollisionStrategy interface and wraps another
strategy. It extends the base strategy's behavior by creating two new pucks at
the location of the collision.We created another class that extends the ball
class. It has the same function of the ball besides losing lives when it goes
out of the screen.
This design ensures that all collision strategies contribute to the collision
resolution process simultaneously, allowing for complex and dynamic
interactions
between game objects. Each strategy's behavior is executed concurrently,
leading to combined effects on the game state.

DoubleStragedy Design Overview:
The CollisionStrategyFactory is responsible for creating different collision
strategies based on specified parameters.
It follows a factory pattern, allowing the creation of various collision
strategies using a unified interface.
Implementation:
In the getCollisionStrategy method, a switch-case statement determines
which strategy to create based on the provided strategy number.
When the strategy number is 4, indicating the need for a double behavior,
the doubleBehaviorHandler method is called.
Double Behavior Handling:
The doubleBehaviorHandler method generates a random first and second
strategy number.
If the first number equals 4, indicating the need for a triple behavior
(which is not implemented in this code snippet), it generates two additional
random numbers for the third and fourth strategies.
Then, it recursively calls getCollisionStrategy to create instances of
the selected strategies.
If the first number is not 4, it simply creates two strategies based on the
randomly generated numbers.
Finally, it returns the combination of strategies, where each subsequent
strategy wraps the previous one.
Limitation on Behaviors:
The code limits the number of behaviors to a predefined set of options
(0 to 4 in this case).
If the strategy number exceeds the defined range, it defaults to returning
the base strategy without any additional behavior.
Here's how the code snippet accomplishes the implementation of the double
behavior within the CollisionStrategyFactory. It dynamically combines two
collision strategies based on randomly generated numbers, allowing for varied
and unpredictable collision interactions in the game.

Our code is designed to facilitate maintenance and expansion of functionality
across all components. We aimed for a high level of generality, ensuring that
additional strategies can be seamlessly integrated into the codebase.
The API remains consistent throughout, following the principles established
in the initial implementation.

To maintain flexibility, we opted to pass the counter to the strategies.
This decision stems from the strategy's responsibility to decrement the counter
upon collision, as outlined in the exercise guidelines. While it would have
been preferable to directly manipulate an object within each strategy,
we chose to adhere to the existing API for onCollision without introducing
significant changes. Thus, passing the counter as an argument to the
strategies
allows us to achieve the desired functionality without deviating from
the prescribed guidelines.






