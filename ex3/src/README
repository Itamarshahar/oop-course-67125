itamarshahar2, amirt97
315669689, 208588244

1. UML diagram:
    * The Image class:
        represents an image.
    * The SubImageCharMatcher class:
        represents a char matcher between sub image and a char.
    * The AsciiArtAlgorithm class:
        represents an algorithm that generates an ascii art
          from an image, holds an Image object, by composition.
    * The KeyBoardInput class:
        gets input from the user.
    * The AsciiOutput interface:
        represents an output of an ascii art.
    * The ConsoleAsciiOutput:
        implements the AsciiOutput interface. represents an output of an ascii
        art to the console.
    * The HtmlAsciiOutput class:
        implements the AsciiOutput interface, represents an output of an
        ascii art to an html file,
    * The PaddedImage class:
        represents a class that hold a Image object and can generate padded
        version of the Image object.
    * The CharConverter class:
        converts char to a binary "image" (2D array of booleans).
    * The SubImage class:
        represents a class that hold a Image object and can generate List of
        sub images representing the original image.


 2. Java Data Structures we used:
    * HashMap - Raw brightness values from the SubImageCharMatcher class. Maps
     Character to it's Double value
        * Insert: O(1)
        * Delete O(1)
        * Search O(1)
        * Space O(n)

    * HashSet - Stores the char/s with the current min/max brightness value.
            We used a HashSet to store the chars with min or max brightness in the SubImageCharMatcher class.
            HashSet is best for this use case because we don't need to keep the chars sorted by their ascii
            value, and we don't need to keep the chars sorted by their brightnessNormalized value. We only
            need to keep the chars in a set, and check if a char is in the set, and add a char to the set.
        * Insert: O(1)
        * Delete O(1)
        * Search O(1)
        * Space O(n)

    * TreeSet - Tree of all chars from SubImageCharMatcher class
        We utilized the TreeSet data structure, to help us save the chars
        ordered according to their ASCII values. This allows us to easy print
        the char by their order latter in the user interface
        * Insert: O(log(n))
        * Delete O(log(n))
        * Search O(log(n))
        * Space O(n)
        We will notice here that since the allowed values are char with ASCII
        value of 32-126, so n is constant and all operation over the TreeSet
        are O(1).
    * TreeMap - Maps the normalized brightness value to the char, and order
        by the brightness value (the raw values).
        The TreeMap help us to efficiently find the char with the closest value
        in case the char doesn't exist within the chars set.
        brightness value
        * Insert: O(log(n))
        * Delete O(log(n))
        * Search O(log(n))
        * Space O(n)

3. Exception part
4. Changes in the API of SubImageCharMatcher class:
    * public TreeSet<Character> getCharSet()
        getter for the charSet. Used in the "chars" command.
    * double calculateImageBrightness(Image image)
        calculate the brightness of the image
5. public double calculateImageBrightness(Image image)
        this function calculate the brightness of a given image